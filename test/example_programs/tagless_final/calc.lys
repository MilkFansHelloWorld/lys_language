let calc_tagless_interpreter: exists 's. (int -> 's * 's -> int * ('s -> 's -> 's) * ('s -> 's -> 's) * ('s -> 's -> 's) * ('s -> 's -> 's)) = 
    pack (exists 's. (int -> 's * 's -> int * ('s -> 's -> 's) * ('s -> 's -> 's) * ('s -> 's -> 's) * ('s -> 's -> 's)), int, (
        fun (x: int) -> x,
        fun (x: int) -> x,
        fun (x: int) -> fun (y: int) -> x + y,
        fun (x: int) -> fun (y: int) -> x - y,
        fun (x: int) -> fun (y: int) -> x * y,
        fun (x: int) -> fun (y: int) -> x / y
    ));;

let pack ('a, calc) = calc_tagless_interpreter in
    match calc with
    | (of_int, to_int, add, minus, mul, div) ->
    (* 1 + 3 * 5 + 9 *)
        to_int (add (of_int 1) (add (mul (of_int 3) (of_int 5)) (of_int 9)));;


(*Small hack because existentials hide the type completely*)
let calc_tagless_compiler: exists 's. (int -> 's * 's -> []int * ('s -> 's -> 's) * ('s -> 's -> 's) * ('s -> 's -> 's) * ('s -> 's -> 's)) = 
    pack (exists 's. (int -> 's * 's -> []int * ('s -> 's -> 's) * ('s -> 's -> 's) * ('s -> 's -> 's) * ('s -> 's -> 's)), 
    []int, (
        fun (x: int) -> lift[int] x,
        fun (x: []int) -> x,
        fun (x: []int) -> fun (y: []int) -> let box x = x in let box y = y in box(|- x with () + y with ()),
        fun (x: []int) -> fun (y: []int) -> let box x = x in let box y = y in box(|- x with () - y with ()),
        fun (x: []int) -> fun (y: []int) -> let box x = x in let box y = y in box(|- x with () * y with ()),
        fun (x: []int) -> fun (y: []int) -> let box x = x in let box y = y in box(|- x with () / y with ())
    ));;

let pack ('a, calc) = calc_tagless_compiler in
    match calc with
    | (of_int, to_int, add, minus, mul, div) ->
    (* 1 + 3 * 5 + 9 *)
        to_int (add (of_int 1) (add (mul (of_int 3) (of_int 5)) (of_int 9)));;
