datatype typ = TUnit | TFun of (typ * typ);;

datatype typ_option = None_typ | Some_typ of typ;;

datatype term = Id of string | Unit | Lambda of (string * typ * term) | App of (term * term);;

datatype term_option = None_term | Some_term of term;;

datatype value = VUnit | VLambda of (string * typ * term);;

datatype value_option = None_value | Some_value of value;;

datatype typ_env = Nil_typ_env | Cons_typ_env of ((string * typ) * typ_env);;

datatype env = Nil_env | Cons_env of ((string * value) * env);;

(*
    Church encoding
    0 = lambda f. lambda x. x
    n = lambda f. lambda x. f f f f ...(f x)
    succ = lambda n. lambda f. lambda x. f (n f x)
*)

let num: int -> term = fun (n:int) ->
    let rec num_aux: int -> term = fun (n:int) ->
        if n = 0 then Id ("x") else App (Id ("f"), num_aux (n-1))
    in
    Lambda ("f", TFun (TUnit, TUnit), Lambda ("x", TUnit, num_aux n));;

let zero: term = num 0;;

let one: term = num 1;;

let five: term = num 5;;

let succ: term = Lambda("n", TFun (TFun (TUnit, TUnit), TFun (TUnit, TUnit)), 
                    Lambda ("f", TFun (TUnit, TUnit), 
                        Lambda ("x", TUnit, 
                            App (Id ("f"), App (App (Id ("n"), Id ("f")), Id ("x")))
                            )));;

(*Attempt 1: Useless first attempt*)
(*
let rec eval_staged: term -> []value_option = fun (e: term) ->
    match e with
    | Id (id) -> box (|- None_value)
    | Unit -> box (|- Some_value (VUnit))
    | Lambda (id, tt, e) -> let box res = lift[value] (VLambda (id, tt, e)) in box (|- Some_value (res with ()))
    | App (t1, t2) -> 
        let box v1_opt = eval_staged t1 in
        let box v2_opt = eval_staged t2 in
        (match (v1_opt with ()) with
        | None_value -> box (|- None_value)
        | Some_value (v1) -> 
            (match (v2_opt with ()) with
            | None_value -> box (|- None_value)
            | Some_value (v2) ->
                (match v1 with
                | VLambda (id1, t1, e1) ->
                    let box evaluated = eval_staged (substitute e1 id1 v2)
                    in
                        box (|- evaluated with ())
                | _ -> box (|- None_value))));;

eval_staged (App (succ, one));;

*)

(*
    Attempt 2: Use the contextual version of the interpreter.
    Use context as input: list of (id, expr)
    Failed because of staging issues -- cf. Eval.
*)

let type_infer: term -> [gamma: typ_env]typ_option =

    let box add_to_typ_env = 
        box (gamma: typ_env, iddef: (string*typ) |-
            Cons_typ_env (iddef, gamma)
        )
    in

    let box get_from_typ_env = box(gamma: typ_env, id: string|-
        let rec get_from_typ_env: typ_env -> string -> typ_option = fun (gamma: typ_env) -> fun (id: string) ->
            match gamma with
            | Nil_typ_env -> None_typ
            | Cons_typ_env (iddef, gamma) -> if id = iddef[0] then Some_typ (iddef[1]) else get_from_typ_env gamma id
        in
        get_from_typ_env gamma id)
    in

    let rec type_infer_aux: term -> [gamma: typ_env]typ_option = 
        fun (e:term) ->
        match e with
        | Id (id)  -> let box lifted_id = (lift[string] id) in 
            box (gamma: typ_env |- (get_from_typ_env with (gamma, lifted_id with ())))
        | Unit -> box (gamma: typ_env|- Some_typ (TUnit))
        | Lambda (id, tt, e) ->
            let box typ_infer_e = type_infer_aux e in
            let box lifted_id = lift[string] id in
            let box lifted_tt = lift[typ] tt in
            box (gamma: typ_env |-
                let new_env: typ_env = (add_to_typ_env with (gamma, (lifted_id with (), lifted_tt with ()))) in
                match (typ_infer_e with (new_env)) with
                | None_typ -> None_typ
                | Some_typ (tt2) -> Some_typ (TFun (lifted_tt with (), tt2))
            )
        | App (e1, e2) -> 
            let box partial_type_infer_e1 = type_infer_aux e1 in
            let box partial_type_infer_e2 = type_infer_aux e2 in
            box (gamma: typ_env |-
                match (partial_type_infer_e1 with (gamma)) with
                | None_typ -> None_typ
                | Some_typ (t1) -> 
                    (match t1 with
                    | TFun (tt2, tt3) ->
                        (match (partial_type_infer_e2 with (gamma)) with
                        | None_typ -> None_typ
                        | Some_typ (t2) -> if tt2 = t2 then Some_typ (tt3) else None_typ)
                    | _ -> None_typ)
            )
    in 
        type_infer_aux;;

let eval_with_input: term -> [bindings: env]value_option = 
    let box add_to_env =
        box (|- fun (gamma: env) -> fun (iddef: (string * value)) -> Cons_env (iddef, gamma))
    in
    let box get_from_env = box (|- let rec get_from_env: env -> string -> value_option = fun (gamma: env) -> fun (id: string) ->
        match gamma with
        | Nil_env -> None_value
        | Cons_env (iddef, gamma) -> if id = iddef[0] then Some_value (iddef[1]) else get_from_env gamma id
    in
        get_from_env)
    in 
    let box eval_unboxed = box (|- 
        let rec eval: term -> env -> value_option = fun (e: term) -> fun (bindings: env) -> 
            match e with
            | Id (id) -> (get_from_env with ()) bindings id
            | Unit -> Some_value (VUnit)
            | Lambda (id, tt, e) -> Some_value (VLambda (id, tt, e))
            | App (t1, t2) -> 
                let v1_opt: value_option = eval t1 bindings in
                let v2_opt: value_option = eval t2 bindings in
                (match v1_opt with
                | None_value -> None_value
                | Some_value (v1) -> 
                    (match v2_opt with
                    | None_value -> None_value
                    | Some_value (v2) ->
                        (match v1 with
                        | VLambda (id1, t1, e1) ->
                            let new_bindings: env = (add_to_env with ()) bindings (id1, v2) in
                            eval e1 new_bindings
                        | _ -> None_value)))
        in eval
    )
    in
    let rec eval_with_input: term -> [bindings: env]value_option = fun (e: term) -> 
        match e with
        | Id (id) -> let box unboxed_lifted_id = lift[string] id in box (bindings: env |- (get_from_env with ()) bindings (unboxed_lifted_id with ()))
        | Unit -> box (bindings: env |- Some_value (VUnit))
        | Lambda (id, tt, e) -> 
            let box unboxed_value = lift[value] (VLambda (id, tt, e)) in 
                box (bindings: env |- Some_value (unboxed_value with ()))
        | App (t1, t2) -> 
            let box eval_t1 = eval_with_input t1 in
            let box eval_t2 = eval_with_input t2 in
            box (bindings: env |- 
            (
                match (eval_t1 with (bindings)) with
                | None_value -> None_value
                | Some_value (v1) -> 
                    (match (eval_t2 with (bindings)) with
                    | None_value -> None_value
                    | Some_value (v2) ->
                        (match v1 with
                        | VLambda (id1, t1, e1) ->
                            let new_bindings: env = (add_to_env with ()) bindings (id1, v2) in
                            (eval_unboxed with ()) e1 new_bindings (*BOOM*)
                        | _ -> None_value)))
            )
    in
    eval_with_input;;

let res: [bindings: env]value_option = eval_with_input (App (succ, one));;

let box u = res in u with (Nil_env);;

let t: [gamma: typ_env]typ_option = type_infer (App (succ, one)) in 

let box u = (t) in u with (Nil_typ_env);;

let res: [bindings: env]value_option = eval_with_input (App (succ, one));;

let box u = res in u with (Nil_env);;
