datatype typ = TUnit | TFun of (typ * typ);;

datatype typ_option = None_typ | Some_typ of typ;;

datatype term = Id of string | Unit | Lambda of (string * typ * term) | App of (term * term);;

datatype term_option = None_term | Some_term of term;;

datatype value = VUnit | VLambda of (string * typ * term);;

datatype value_option = None_value | Some_value of value;;

datatype typ_env = Nil_typ_env | Cons_typ_env of ((string * typ) * typ_env);;

datatype env = Nil_env | Cons_env of ((string * value) * env);;

let to_term: value -> term = fun (t:value) ->
    match t with
    | VUnit -> Unit
    | VLambda (id, tt, e) -> Lambda (id, tt, e);;

let add_to_typ_env: typ_env -> (string * typ) -> typ_env = fun (gamma: typ_env) -> fun (iddef: (string * typ)) -> Cons_typ_env (iddef, gamma);;

let rec get_from_typ_env: typ_env -> string -> typ_option = fun (gamma: typ_env) -> fun (id: string) ->
    match gamma with
    | Nil_typ_env -> None_typ
    | Cons_typ_env (iddef, gamma) -> if id = iddef[0] then Some_typ (iddef[1]) else get_from_typ_env gamma id;;

let add_to_env: env -> (string * value) -> env = fun (gamma: env) -> fun (iddef: (string * value)) -> Cons_env (iddef, gamma);;

let rec get_from_env: env -> string -> value_option = fun (gamma: env) -> fun (id: string) ->
    match gamma with
    | Nil_env -> None_value
    | Cons_env (iddef, gamma) -> if id = iddef[0] then Some_value (iddef[1]) else get_from_env gamma id;;

let type_infer: term -> typ_env -> typ_option = 
    let add_to_env: env -> (string * value) -> env = fun (gamma: env) -> fun (iddef: (string * value)) -> Cons_env (iddef, gamma)
    in
    let rec get_from_env: env -> string -> value_option = fun (gamma: env) -> fun (id: string) ->
        match gamma with
        | Nil_env -> None_value
        | Cons_env (iddef, gamma) -> if id = iddef[0] then Some_value (iddef[1]) else get_from_env gamma id
    in
    let rec type_infer: term -> typ_env -> typ_option = fun (e:term) -> fun (gamma: typ_env) -> 
        match e with
        | Id (id)  -> get_from_typ_env gamma id
        | Unit -> Some_typ (TUnit)
        | Lambda (id, tt, e) ->
            (
                match (type_infer e (add_to_typ_env gamma (id, tt))) with
                | None_typ -> None_typ
                | Some_typ (tt2) -> Some_typ (TFun (tt, tt2))
            )
        | App (e1, e2) -> 
            match (type_infer e1 gamma) with
            | None_typ -> None_typ
            | Some_typ (t1) -> 
                (match t1 with
                | TFun (tt2, tt3) ->
                    (match (type_infer e2 gamma) with
                    | None_typ -> None_typ
                    | Some_typ (t2) -> if tt2 = t2 then Some_typ (tt3) else None_typ)
                | _ -> None_typ)
    in
    type_infer;;

let eval: term -> env  -> value_option = 
    let add_to_typ_env: typ_env -> (string * typ) -> typ_env = fun (gamma: typ_env) -> fun (iddef: (string * typ)) -> Cons_typ_env (iddef, gamma)
    in
    let rec get_from_typ_env: typ_env -> string -> typ_option = fun (gamma: typ_env) -> fun (id: string) ->
        match gamma with
        | Nil_typ_env -> None_typ
        | Cons_typ_env (iddef, gamma) -> if id = iddef[0] then Some_typ (iddef[1]) else get_from_typ_env gamma id
    in
    let rec eval: term -> env -> value_option = fun (e: term) -> fun (bindings: env) -> 
        match e with
        | Id (id) -> get_from_env bindings id
        | Unit -> Some_value (VUnit)
        | Lambda (id, tt, e) -> Some_value (VLambda (id, tt, e))
        | App (t1, t2) -> 
            let v1_opt: value_option = eval t1 bindings in
            let v2_opt: value_option = eval t2 bindings in
            (match v1_opt with
            | None_value -> None_value
            | Some_value (v1) -> 
                (match v2_opt with
                | None_value -> None_value
                | Some_value (v2) ->
                    (match v1 with
                    | VLambda (id1, t1, e1) ->
                        let new_bindings: env = add_to_env bindings (id1, v2) in
                        eval e1 new_bindings
                    | _ -> None_value)))
    in eval;;

let rec substitute: term -> string -> value -> term = fun (e:term) -> fun (id_to_sub: string) -> fun (v: value) ->
    match e with
    | Unit -> Unit
    | Lambda (id, tt, e) -> 
        if id = id_to_sub then Lambda (id, tt, e) (*Cut*)
        else Lambda (id, tt, substitute e id_to_sub v) (*This is sound only because the value is closed*)
    | App (t1, t2) -> App (substitute t1 id_to_sub v, substitute t2 id_to_sub v)
    | Id (id) -> if id = id_to_sub then to_term v else Id (id);;

let rec eval2: term -> value_option = fun (e: term) ->
    match e with
    | Id (id) -> None_value
    | Unit -> Some_value (VUnit)
    | Lambda (id, tt, e) -> Some_value (VLambda (id, tt, e))
    | App (t1, t2) -> 
        let v1_opt: value_option = eval2 t1 in
        let v2_opt: value_option = eval2 t2 in
        (match v1_opt with
        | None_value -> None_value
        | Some_value (v1) -> 
            (match v2_opt with
            | None_value -> None_value
            | Some_value (v2) ->
                (match v1 with
                | VLambda (id1, t1, e1) ->
                    eval2 (substitute e1 id1 v2)
                | _ -> None_value)));;

(*
    Church encoding
    0 = lambda f. lambda x. x
    n = lambda f. lambda x. f f f f ...(f x)
    succ = lambda n. lambda f. lambda x. f (n f x)
*)

let num: int -> term = fun (n:int) ->
    let rec num_aux: int -> term = fun (n:int) ->
        if n = 0 then Id ("x") else App (Id ("f"), num_aux (n-1))
    in
    Lambda ("f", TFun (TUnit, TUnit), Lambda ("x", TUnit, num_aux n));;

let zero: term = num 0;;

let one: term = num 1;;

let five: term = num 5;;

let succ: term = Lambda("n", TFun (TFun (TUnit, TUnit), TFun (TUnit, TUnit)), 
                    Lambda ("f", TFun (TUnit, TUnit), 
                        Lambda ("x", TUnit, 
                            App (Id ("f"), App (App (Id ("n"), Id ("f")), Id ("x")))
                            )));;


(*Tests*)

type_infer zero (Nil_typ_env);;
eval one (Nil_env);;

type_infer one (Nil_typ_env);;
eval one (Nil_env);;

type_infer five (Nil_typ_env);;
eval five (Nil_env);;

type_infer succ (Nil_typ_env);;
eval succ (Nil_env);;

type_infer (App (succ, one)) (Nil_typ_env);;
eval (App (succ, one)) (Nil_env);;
