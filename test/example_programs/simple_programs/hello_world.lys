let rec (pow: int -> int -> int) = fun (n:int) -> fun (x:int) -> 
    if n = 0 then 1
    else (x * (pow (n-1) x));;

(* let rec (pow: int -> int -> int) = fun (n:int) -> 
    if n = 0 then (fun (x:int) -> 1) 
    else (fun (x:int) -> x * (pow (n-1) x));;

let rec (pow: int -> int -> int) = fun (n:int) -> 
    if n = 0 then (fun (x:int) -> 1) 
    else
        let pow_n_1:(int -> int) = pow (n-1) in 
        (fun (x:int) -> x * pow_n_1 x);; *)

pow 2 3;; (*gives 9*)

let rec (pow2: int -> [x:int]int) = fun (n:int) -> 
if n = 0 then box (x:int |- 1)
else 
    let box u = pow2 (n-1) in 
        box (x:int |- 
            x * (u with (x))
        );;
pow2 2;;

let box u = pow2 2 in u with (3);; (*gives 9*)

datatype intlist = Nil | Cons of (int * intlist);;

let rec map_int_int:((int -> int) -> intlist -> intlist) = 
    fun (f:(int -> int)) -> fun (xs: intlist) -> 
    match xs with
    | Cons (x, xs) -> Cons (f x, map_int_int f xs)
    | Nil -> Nil;;


let pow_compiled: int -> int = let box u = pow2 512 in fun (x: int) -> u with (x);;
(*map_int_int (pow 10) (Cons (1, Cons (2, Nil)));;
map_int_int (pow_10_compiled) (Cons (1, Cons (2, Nil)));;
*)
pow_compiled 0;;
pow 512 0;;

let rec run_n_times: (int -> int) -> int -> intlist -> intlist =
    fun (f: int -> int) -> fun (x: int) ->  fun (xs: intlist) -> 
        match xs with
        | Cons (x, xs) ->
            Cons(f 0, run_n_times f (x-1) xs)
        | Nil -> Nil;;

(*
run_n_times pow_compiled 512;;
run_n_times (pow 512) 512;;
*)
