let rec acc2:(regexp -> [cont: [str:charlist, loop: charlist -> bool]bool][str: charlist]bool) = 
fun (exp: regexp) ->
    let box placeholder_cont = box (|-
        fun (s: charlist) -> false
    )
    in
    match exp with
    | Empty -> 
        box (cont: [str:charlist, loop: charlist -> bool]bool |- 
            let box u = cont in
                box (str:charlist |- u with (str, placeholder_cont with ()))
        )
    | Plus (e1, e2) -> 
        let box res1 = acc2 e1 in
        let box res2 = acc2 e2 in
        box (cont: [str:charlist, loop: charlist -> bool]bool |-
            let box unboxed_res1 = (res1 with (cont)) in
            let box unboxed_res2 = (res2 with (cont)) in
            box (str: charlist |- 
                (unboxed_res1 with (str)) or (unboxed_res2 with (str))
            )
        )
    | Times (e1, e2) ->
        let box res1 = acc2 e1 in
        let box res2 = acc2 e2 in
        box (cont: [str:charlist, loop: charlist -> bool]bool |- 
            let acc_e2_cnt: [str:charlist]bool = res2 with (cont)
            in
            let box unboxed_acc_e2_cnt = acc_e2_cnt in
            let new_cont: [str:charlist, loop: charlist -> bool]bool = box (str: charlist, loop: charlist -> bool |- unboxed_acc_e2_cnt with (str))
            in 
            res1 with (new_cont)
        ) 
    | Const (c) ->
        let box lifted_unboxed_c = lift[char] c in
        box (cont: [str:charlist, loop: charlist -> bool]bool |- 
            let box unboxed_cont = cont in
            box (str: charlist |- 
                match str with
                | Nil -> false
                | Cons (x, xs) -> 
                    (x = (lifted_unboxed_c with ())) and
                    (unboxed_cont with (str, placeholder_cont with ()))
            )
        )
    (*| Star (e) -> *)
    (*Doesn't work here: infinite loop, cf https://www.cs.cmu.edu/~rwh/students/nanevski.pdf for a solution*)
    (*Trick = introduce a spurious redex to stop beta reduction*)
        (*
        let box res = acc2 e in
        let box res_star = acc (Star (e))
        in
        box (cont: [str:charlist]bool |- 
            let box unboxed_cont = cont in
            let box res_star_cont = res_star with (cont) in
            box (str:charlist |- 
                let box lifted_unboxed_str = lift[charlist] str in
                let contstar: [str:charlist]bool = box (str:charlist |- 
                    if str = (lifted_unboxed_str with ()) then false
                    else res_star_cont with (str)
                ) in
                let box unboxed_res_contstar = res with (contstar) in
                unboxed_cont with (str) or (unboxed_res_contstar with (str))
            )
        )*)
        (*TODO*)
        (*box (str: charlist|- false)*)
        let box res = acc2 e in 
        box (cont: [str: charlist, loop: charlist -> bool]bool |- 
            let box unboxed_cont = cont in
            box (str: charlist |- 
                (*Construct cont*)
                let box lifted_unboxed_old_str = lift[charlist] str in
                let new_cont: [str: charlist, loop: charlist -> bool]bool = box (str: charlist, loop: charlist -> bool |- 
                    if str = (lifted_unboxed_old_str with ()) then false
                    else loop str
                )
                in
                let box unboxed_acc2_e_new_cont = res with (new_cont) in
                box (str: charlist|- 
                    let rec loop: charlist -> bool = 
                        fun (s: charlist) ->
                            unboxed_cont with (str) or (unboxed_acc2_e_new_cont with (str, ))
                )
            )
        )
;;
